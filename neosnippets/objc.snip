snippet sel
    @selector(${1:#:method}:)


snippet imp
    #import <${1:Cocoa/Cocoa.h}>


snippet Imp
    #import "${1}}"


snippet log
abbr NSLog(...)
    NSLog(@"${1}")


snippet cl
abbr Class
	@interface ${1} : ${2:NSObject}
	{
	}
	@end
	
	@implementation ${1}
	- (id)init
	{
		if((self = [super init]))
		{${0}
		}
		return self;
	}
	@end

snippet cli
abbr ClassInterface
	@interface ${1} : ${2:NSObject}
	{${3}
	}
	${0}
	@end

snippet clm
abbr ClassImplementation
	@implementation ${1:object}
	- (id)init
	{
		if((self = [super init]))
		{${0}
		}
		return self;
	}
	@end

snippet cat
abbr Category
	@interface ${1:NSObject} (${2:Category})
	@end
	
	@implementation ${1} (${2})
	${0}
	@end

snippet cati
abbr CategoryInterface
	@interface ${1:NSObject)} (${2:Category)})
	${0}
	@end

snippet array
    NSMutableArray *${1:#:array} = [NSMutableArray array];


snippet dict
    NSMutableDictionary *${1:#:dict} = [NSMutableDictionary dictionary];


snippet bez
    NSBezierPath *${1:#:path} = [NSBezierPath bezierPath];

snippet m
abbr Method
	- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}
	{
	${0}
		return nil;
	}

snippet M
abbr Method
    - (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument};


snippet cm
abbr ClassMethod
	+ (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}
	{
	${0}
		return nil;
	}


snippet icm
abbr InterfaceClassMethod
    + (${1:#:id})${0:#:method};


snippet sm
abbr SubMethod
	- (${1:#:id})${2:#:method}${3:(#:id)}${4:#:anArgument}
	{
		${1} res = [super ${2:#:method}]
		return res;
	}


snippet mi
abbr MethodInitialize
	+ (void)initialize
	{
		[[NSUserDefaults standardUserDefaults] registerDefaults:[NSDictionary dictionaryWithObjectsAndKeys:
			${0}@"value", @"key",
			nil]];
	}

snippet obj
	- (${1:#:id})${2:#:thing}
	{
		return ${2};
	}
	
	- (void)set${2}:(${1})aValue
	{
		${0}${1}old${2} = ${2};
		${2} = [aValue retain];
		[old${2} release];
	}


snippet iobj
	- (${1:#:id})${2:#:thing};
	- (void)set${2}:(${1})aValue;

snippet str
	- (NSString${$1: *)})${1:#:thing}
	{
		return ${2};
	}
	
	- (void)set${1}:(NSString${2: *})${3}
	{
		${3} = [${3} copy];
		[${2} release];
		${2} = ${3};
	}

snippet istr
	- (NSString${1: *)}${1:#:thing};
	- (void)set${1}:(NSString${2: *})${2};

snippet cd
abbr CoreData
	- (${1:#:id})${2:#:attribute}
	{
		[self willAccessValueForKey:@"$2"];
		$1 value = [self primitiveValueForKey:@"$2"];
		[self didAccessValueForKey:@"$2"];
		return value;
	}
	
	- (void)set$2:($1)aValue
	{
		[self willChangeValueForKey:@"$2"];
		[self setPrimitiveValue:aValue forKey:@"$2"];
		[self didChangeValueForKey:@"$2"];
	}

snippet karray
abbr KVCArry
	- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject
	{
		[${3}} addObject:anObject];
	}
	
	- (void)insertObject:($2)anObject in$1AtIndex:(unsigned int)i 
	{
		[${3} insertObject:anObject atIndex:i];
	}
	
	- (${2})objectIn${1}AtIndex:(unsigned int)i
	{
		return [${3} objectAtIndex:i];
	}
	
	- (unsigned int)indexOfObjectIn${1}:(${2})anObject
	{
		return [${3} indexOfObject:anObject];
	}
	
	- (void)removeObjectFrom${1}AtIndex:(unsigned int)i
	{
		 [${3} removeObjectAtIndex:i]; 
	}
	
	- (unsigned int)countOf${1}
	{
		return [${3} count];
	}
	
	- (NSArray${4: *}${1}
	{
		return ${3}
	}
	
	- (void)set${1}:(NSArray${4: *})new${1}
	{
		[${3} setArray:new${1}];
	}
    

snippet iarray
abbr InterfaceAccessorsForKVCArray
	- (void)addObjectTo${1:#:Things}:(${2:#:id})anObject;
	- (void)insertObject:(${2})anObject in${1}AtIndex:(unsigned int)i;
	- (${2})objectIn${1}AtIndex:(unsigned int)i;
	- (unsigned int)indexOfObjectIn${1}:(${2})anObject;
	- (void)removeObjectFrom${1}AtIndex:(unsigned int)i;
	- (unsigned int)countOf${1};
	- (NSArray${3: *})${1};
	- (void)set${1}:(NSArray${3: *})new${1};


snippet acc
abbr PrimitiveType
	- (${1:unsigned int})${2:#:thing}
	{
		return ${3};
	}
	
	- (void)set${2}:(${1:unsigned int})new${2}
	{
		${3} = new${2};
	}


snippet iacc
abbr Interface:AccessorsForPrimitiveType
	- (${1:unsigned int})${2:thing};
	- (void)set${2}:($1)new${2};

snippet rdef
abbr ReadDefaultsValue
    [[NSUserDefaults standardUserDefaults] objectForKey:${1:key}];


snippet wdef
abbr WriteDefaultsValue
    [[NSUserDefaults standardUserDefaults] setObject:${1:object} forKey:${2:key}];


snippet ibo
abbr IBOutlet
    IBOutlet ${1}${2: *}${3};


snippet syn
    @synthesize ${1:#:property};


snippet bind
    bind:@"${2:#:binding}" toObject:${3:observableController} withKeyPath:@"${4:keyPath}" options:${5:nil}


snippet reg
    [[NSNotificationCenter defaultCenter] addObserver:${1:self} selector:@selector(${3}) name:${2:NSWindowDidBecomeMainNotification} object:${4:nil}];


snippet focus
	[self lockFocus];
	${0}
	[self unlockFocus];

snippet forarray
	unsigned int	${1:object}Count = [${2:array} count];
	
	for(unsigned int index = 0; index < ${1}Count; index += 1)
	{
		${3:id}	${1} = [${2} objectAtIndex:index];
		${0}
	}

snippet alert
	int choice = NSRunAlertPanel(@"${1:Something important!}", @"${2:Something important just happend, and now I need to ask you, do you want to continue?}", @"${3:Continue}", @"${4:Cancel}", nil);
	if(choice == NSAlertDefaultReturn) // "${3:Continue}"
	{
		${0};
	}
	else if(choice == NSAlertAlternateReturn) // "${4:Cancel}"
	{
		
	}

snippet res
	${1} Send ${2} to ${1}, if ${1} supports it}${3}
	if ([${1:self} respondsToSelector:@selector(${2:someSelector:})])
	{
	    [${1} ${3}];
	}

snippet del
	if([${1:[self delegate]} respondsToSelector:@selector(${2:selfDidSomething:})])
		[${1} ${3}];


snippet format
   [NSString stringWithFormat:@"${1}", ${2}]${0} 


snippet save
	[NSGraphicsContext saveGraphicsState];
	${0}
	[NSGraphicsContext restoreGraphicsState];


snippet thread
    [NSThread detachNewThreadSelector:@selector(${1:#:method}:) toTarget:${2:#:aTarget} withObject:${3:#:anArgument}]


snippet pool
	NSAutoreleasePool${TM_C_POINTER: *}pool = [NSAutoreleasePool new];
	${0}
	[pool drain];

# #import <...>
snippet Imp
    #import <${1:Cocoa/Cocoa.h}>
# #import "..."
snippet imp
    #import "${1:`vim_snippets#Filename()`.h}"
# @selector(...)
snippet sel
    @selector(${1:method}:)
# @"..." string
snippet s
    @"${1}"
# Object
snippet o
    ${1:NSObject} *${2:foo} = [${3:$1 alloc}]${4};
# NSLog(...)
snippet log
    NSLog(@"${1:%@}"${2});
# Class
snippet objc
    @interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
    {
    }
    @end

    @implementation $1
    ${0}
    @end
# Class Interface
snippet int
    @interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
    {${3}
    }
    ${0}
    @end
snippet @interface
    @interface ${1:`vim_snippets#Filename('', 'someClass')`} : ${2:NSObject}
    {${3}
    }
    ${0}
    @end
# Class Implementation
snippet impl
    @implementation ${1:`vim_snippets#Filename('', 'someClass')`}
    ${0}
    @end
snippet @implementation
    @implementation ${1:`vim_snippets#Filename('', 'someClass')`}
    ${0}
    @end
# Protocol
snippet pro
    @protocol ${1:`vim_snippets#Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
    ${0}
    @end
snippet @protocol
    @protocol ${1:`vim_snippets#Filename('$1Delegate', 'MyProtocol')`} ${2:<NSObject>}
    ${0}
    @end
# init Definition
snippet init
    - (id)init
    {
        if (self = [super init]) {
            ${0}
        }
        return self;
    }
# dealloc Definition
snippet dealloc
    - (void) dealloc
    {
        ${0:deallocations}
        [super dealloc];
    }
snippet su
    [super ${1:init}]
snippet ibo
    IBOutlet ${1:NSSomeClass} *${2:$1};
# Category
snippet cat
    @interface ${1:NSObject} (${2:MyCategory})
    @end

    @implementation $1 ($2)
    ${0}
    @end
# Category Interface
snippet cath
    @interface ${1:`vim_snippets#Filename('$1', 'NSObject')`} (${2:MyCategory})
    ${0}
    @end
# Method
snippet m
    - (${1:id})${2:method}
    {
        ${0}
    }
# Method declaration
snippet md
    - (${1:id})${2:method};
# IBAction declaration
snippet ibad
    - (IBAction)${1:method}:(${2:id})sender;
# IBAction method
snippet iba
    - (IBAction)${1:method}:(${2:id})sender
    {
        ${0}
    }
# awakeFromNib method
snippet wake
    - (void)awakeFromNib
    {
        ${0}
    }
# Class Method
snippet M
    + (${1:id})${2:method}
    {
        ${0:return nil;}
    }
# Sub-method (Call super)
snippet sm
    - (${1:id})${2:method}
    {
        [super $2];${0}
        return self;
    }
# Accessor Methods For:
# Object
snippet objacc
    - (${1:id})${2:thing}
    {
        return $2;
    }

    - (void)set$2:($1)${3:new$2}
    {
        [$3 retain];
        [$2 release];
        $2 = $3;
    }
# for (object in array)
snippet forin
    for (${1:Class} *${2:some$1} in ${3:array}) {
        ${0}
    }
snippet fore
    for (${1:object} in ${2:array}) {
        ${0:statements}
    }
snippet forarray
    unsigned int ${1:object}Count = [${2:array} count];

    for (unsigned int index = 0; index < $1Count; index++) {
        ${3:id} $1 = [$2 $1AtIndex:index];
        ${0}
    }
snippet fora
    unsigned int ${1:object}Count = [${2:array} count];

    for (unsigned int index = 0; index < $1Count; index++) {
        ${3:id} $1 = [$2 $1AtIndex:index];
        ${0}
    }
# Try / Catch Block
snippet @try
    @try {
        ${1:statements}
    }
    @catch (NSException * e) {
        ${2:handler}
    }
    @finally {
        ${0:statements}
    }
snippet @catch
    @catch (${1:exception}) {
        ${0:handler}
    }
snippet @finally
    @finally {
        ${0:statements}
    }
# IBOutlet
# @property (Objective-C 2.0)
snippet prop
    @property (${1:retain}) ${2:NSSomeClass} ${3:*$2};
# @synthesize (Objective-C 2.0)
snippet syn
    @synthesize ${1:property};
# [[ alloc] init]
snippet alloc
    [[${1:foo} alloc] init${2}];
snippet a
    [[${1:foo} alloc] init${2}];
# retain
snippet ret
    [${1:foo} retain];
# release
snippet rel
    [${0:foo} release];
# autorelease
snippet arel
    [${0:foo} autorelease];
# autorelease pool
snippet pool
    NSAutoreleasePool *${1:pool} = [[NSAutoreleasePool alloc] init];
    ${0}
    [$1 drain];
# Throw an exception
snippet except
    NSException *${1:badness};
    $1 = [NSException exceptionWithName:@"${2:$1Name}"
                                 reason:@"${0}"
                               userInfo:nil];
    [$1 raise];
snippet prag
    #pragma mark ${0:-}
snippet cl
    @class ${1:Foo};
snippet color
    [[NSColor ${0:blackColor}] set];
# NSArray
snippet array
    NSMutableArray *${1:array} = [NSMutable array];
snippet nsa
    NSArray ${0}
snippet nsma
    NSMutableArray ${0}
snippet aa
    NSArray * array;
snippet ma
    NSMutableArray * array;
# NSDictionary
snippet dict
    NSMutableDictionary *${1:dict} = [NSMutableDictionary dictionary];
snippet nsd
    NSDictionary ${0}
snippet nsmd
    NSMutableDictionary ${0}
# NSString
snippet nss
    NSString ${0}
snippet nsms
    NSMutableString ${0}
