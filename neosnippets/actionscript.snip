snippet ec
    #endinitclip


snippet inc
    #include "${1}"


snippet br
    break;


snippet ca
    call(${1:#:frame});


snippet case
abbr ce
	case ${1:#:expression} :
		${1:TARGET}


snippet catch
abbr ch
	catch ($1) {
		$2
	}

snippet class
	class ${1:#:ClassName} {
		var _${2};
		function ${1}(${2}){
			_${2} = ${2};${0}
		}
	}

snippet co
    continue;


snippet dt
	default :
		${1:TARGET}


snippet de
    delete ${1};


snippet do
	do {
		${1:TARGET}
	} while (${2:#:condition});


snippet dm
    duplicateMovieClip(${1:#:target}, ${2:#:newName}, ${3:#:depth});


snippet ei
	else if (${1}) {
		${2:TARGET}
	}


snippet fori
abbr fi
	for (var ${1} in ${2}){
		${3:TARGET}
	};


snippet for
abbr fr
	for (var ${1} = 0; $1 < ${2}.length; $1++) {
		${0:TARGET}
	};


snippet fs
    fscommand(${1:#:command}, ${2:#:paramaters});


snippet fn
	function ${1}(${2}):${3}{
		${0:TARGET}
	};

snippet gu
    getURL(${1});


snippet gp
    gotoAndPlay(${1});


snippet gs
	gotoAndStop(${1});

snippet if
	if (${1}) {
		${0:TARGET}
	}

snippet il
	ifFrameLoaded (${1}) {
		${0:TARGET}
	}

snippet ip
    import ${1};


snippet it
    interface ${1}{
    	${0:TARGET}
    }


snippet lm
    loadMovie(${1:url}, ${2:target}, ${3:method});


snippet ln
    loadMovieNum(${1:url}, ${2:level}, ${3:method});


snippet lv
    loadVariables(${1:url}, ${2:target}, ${3:method});


snippet vn
    loadVariables(${1:url}, ${2:level}, ${3:method});


snippet mc
    MovieClip


snippet nf
    nextFrame();


snippet ns
    nextScene();


snippet on
    on (${1}) {
    	${2}
    };


snippet  oc
	onClipEvent (${1}) {
		${0:TARGET}
	};

snippet pl
    play();


snippet pf
    pravFrame();


snippet ps
    prevScene();


snippet pr
    print(${1:#:target}, ${2:#:type});


snippet bn
    printAsBitmapNum(${1:#:level}, ${2:#:type});


snippet pn
    printNum(${1:#:level}, ${2:#:type});


snippet rm
    removeMovieClip(${1:#:target});


snippet rt
    return ${1};


snippet sp
    setProperty(${1:#:target}, ${2:#:property}, ${3:#:value});


snippet sv
    set(${1:#:name}, ${2:#:value});


snippet dr
    startDrag(${1:#:target}, ${2:#:lockcenter}, ${3:#:l}, ${4:#:t}, ${5:#:r}, ${6:#:b} );


snippet st
    stop();


snippet ss
    stopAllSounds();


snippet sd
    stopDrag();


snippet sw
	switch ( ${1:#:condition} ) {
		${0:TARGET}
	}


snippet tt
	tellTarget( ${1:#:target} ) {
		${0:TARGET}
	}

snippet th
    throw ${1};


snippet tq
    toggleHighQuality();


snippet tr
    trace(${1:"$0"});


snippet ty
	try {
		${0:TARGET}
	};

snippet um
    unloadMovie(${1:#:target});


snippet un
    unloadMovieNum(${1:#:level});


snippet vr
    var ${1}:${2};


snippet wh
	while (${1:#:condition}) {
		${0:TARGET}
	};


snippet wt
	with (${1:#:target});
		${0:TARGET}
	};

snippet main
    package {
        import flash.display.*;
        import flash.Events.*;

        public class Main extends Sprite {
            public function Main (  ) {
                trace("start");
                stage.scaleMode = StageScaleMode.NO_SCALE;
                stage.addEventListener(Event.RESIZE, resizeListener);
            }

            private function resizeListener (e:Event):void {
                trace("The application window changed size!");
                trace("New width:  " + stage.stageWidth);
                trace("New height: " + stage.stageHeight);
            }

        }

    }
snippet class
    ${1:public|internal} class ${2:name} ${0:extends } {
        public function $2 (    ) {
            ("start");
        }
    }
snippet all
    package name {

        ${1:public|internal|final} class ${2:name} ${0:extends } {
            private|public| static const FOO = "abc";
            private|public| static var BAR = "abc";

            // class initializer - no JIT !! one time setup
            if Cababilities.os == "Linux|MacOS" {
                FOO = "other";
            }

            // constructor:
            public function $2 (    ){
                super2();
                trace("start");
            }
            public function name (a, b...){
                super.name(..);
                lable:break
            }
        }
    }

    function A(){
        // A can only be accessed within this file
    }
snippet switch
    switch(${1}){
        case ${2}:
            ${0}
        break;
        default:
    }
snippet case
        case ${1}:
            ${0}
        break;
snippet package
    package ${1:package}{
        ${0}
    }
snippet wh
    while ${1:cond}{
        ${0}
    }
snippet do
    do {
        ${0}
    } while (${1:cond})
snippet for enumerate names
    for (${1:var} in ${2:object}){
        ${0}
    }
snippet for enumerate values
    for each (${1:var} in ${2:object}){
        ${0}
    }
snippet get_set
    function get ${1:name} {
        return ${2}
    }
    function set $1 (newValue) {
        ${0}
    }
snippet interface
    interface name {
        function method(${1}):${0:returntype};
    }
snippet try
    try {
        ${1}
    } catch (error:ErrorType) {
        ${2}
    } finally {
        ${0}
    }
# For Loop (same as c.snippet)
snippet for for (..) {..}
    for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
        ${0}
    }
# Custom For Loop
snippet forr
    for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
        ${0}
    }
# If Condition
snippet if
    if (${1:/* condition */}) {
        ${0}
    }
snippet el
    else {
        ${0}
    }
# Ternary conditional
snippet t
    ${1:/* condition */} ? ${2:a} : ${0:b}
snippet fun
    function ${1:function_name}(${2})${3}
    {
        ${0}
    }
# FlxSprite (usefull when using the flixel library)
snippet FlxSprite
    package
    {
        import org.flixel.*

        public class ${1:ClassName} extends ${2:FlxSprite}
        {
            public function $1(${3: X:Number, Y:Number}):void
            {
                super(X,Y);
                ${4}
            }

            override public function update():void
            {
                super.update();
                ${0}
            }
        }
    }

