snippet class
    class ${1} ${2:extends} ${3:#:Parent} ${4:implements} ${5:#:Interface} {
        ${0:TARGET}
    }

snippet interface
    interface ${1} ${2:extends} ${3:#:Parent} {
        ${0:TARGET}
    }

snippet method
    ${1:void} ${2:#:method}(${3}) ${4:throws} {
        ${0:TARGET}
    }

snippet enum
abbr enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    }

snippet var
    ${1:#:type} ${2:#:var}${3};

snippet const
    static public final ${1:#:type} ${2:#:var} = ${3};${4}

snippet const_string
    static public final String ${1:var} = "${2}";${4}

snippet assert
    assert ${1:#:test} : ${2:#:Failure message};${3}

snippet if
    if (${1}) {
        ${2:TARGET}
    }

snippet elif
alias elseif
    else if (${1}) {
        ${2:TARGET}
    }

snippet while
    while (${1}) {
        ${2:TARGET}
    }

snippet for
    for (${1}; ${2}; ${3}) {
        ${4:TARGET}
    }

snippet foreach
alias   fore
    for (${1} : ${2}) {
        ${3:TARGET}
    }

snippet switch
    switch (${1}) {
        ${2:TARGET}
    }

snippet case
    case ${1}:
        ${2:TARGET}
    ${0}

snippet br
    break;

snippet default
alias   de
    default:
        ${0}

snippet try
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    }

snippet try_resources
    try (${1:#:Resources}) {
        ${0:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    }

snippet try_finally
    try {
        ${0:TARGET}
    } catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    } finally {
        ${4}
    }

snippet catch
    catch (${1:Exception} ${2:e}) {
        ${0:e.printStackTrace();}
    }

snippet finally
    finally {
        ${0:TARGET}
    }

snippet th
options word
    throw ${0}

snippet sy
options word
    synchronized

snippet testclass
alias   tc
options head
    public class ${1} extends ${2:TestCase} {
        ${0:TARGET}
    }

snippet test
options head
    public void test${1:#:Name}() throws Exception {
        ${0:TARGET}
    }

snippet import
alias   imt
    import ${1};
    ${0}

snippet j.u
    java.util.

snippet j.i
    java.io.

snippet j.b
    java.beans.

snippet j.n
    java.net

snippet j.m
    java.math.

snippet main
    class `expand('%:p:t:r')` {
        public static void main(String args[]) {
            ${0:#:body}
        }
    }


snippet println
options word
    System.out.println(${1});${0}

snippet print
options word
    System.out.print(${1});${0}

#javadoc
snippet comment
    /**
     * ${0:TARGET}
     */

snippet author
    @author ${0:$TM_FULLNAME}

snippet {code
    {@code ${0}

snippet deprecated
    @deprecated ${0:#:description}

snippet {docRoot
    {@docRoot

snippet {inheritDoc
    {@inheritDoc

snippet {link
    {@link ${1:#:target} ${0:#:label}

snippet {linkplain
    {@linkplain ${1:#:target} ${0:#:label}

snippet {literal
    {@literal ${0}

snippet param
    @param ${1:#:var} ${0:#:description}

snippet return
    @return ${0:#:description}

snippet see
    @see ${0:#:reference}

snippet serial
    @serial ${0:#:description}

snippet sd
    @serialField ${0:#:description}

snippet sf
    @serialField ${1:#:name} ${2:#:type} ${0:#:description}

snippet since
    @since ${0:#:version}

snippet throws
    @throws ${1:#:class} ${0:#:description}

snippet {value
    {@value ${0}

snippet version
alias ver
    @version ${0:#:version}

snippet     helloworld
options     head
  public class ${1:Hello} {
    static public void main(String args[]) {
      System.out.println("Hello, world!");
    }
  }
## Access Modifiers
snippet po
    protected ${0}
snippet pu
    public ${0}
snippet pr
    private ${0}
##
## Annotations
snippet before
    @Before
    static void ${1:intercept}(${2:args}) { ${0} }
snippet mm
    @ManyToMany
    ${0}
snippet mo
    @ManyToOne
    ${0}
snippet om
    @OneToMany${1:(cascade=CascadeType.ALL)}
    ${0}
snippet oo
    @OneToOne
    ${1}
##
## Basic Java packages and import
snippet im
    import ${0}
snippet j.b
    java.beans.
snippet j.i
    java.io.
snippet j.m
    java.math.
snippet j.n
    java.net.
snippet j.u
    java.util.
##
## Class
snippet cl
    class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
snippet pcl
    public class ${1:`vim_snippets#Filename("$1", "untitled")`} ${0}
snippet in
    interface ${1:`vim_snippets#Filename("$1", "untitled")`} ${2:extends Parent}
snippet tc
    public class ${1:`vim_snippets#Filename("$1")`} extends ${0:TestCase}
##
## Class Enhancements
snippet ext
    extends ${0}
snippet imp
    implements ${0}
##
## Comments
snippet /*
    /*
     * ${0}
     */
##
## Constants
snippet co
    static public final ${1:String} ${2:var} = ${3};
snippet cos
    static public final String ${1:var} = "${2}";
##
## Control Statements
snippet case
    case ${1}:
        ${0}
snippet def
    default:
        ${0}
snippet el
    else
snippet eif
    else if (${1}) ${0}
snippet if
    if (${1}) ${0}
snippet sw
    switch (${1}) {
        ${0}
    }
##
## Create a Method
snippet m
    ${1:void} ${2:method}(${3}) ${4:throws }
##
## Create a Variable
snippet v
    ${1:String} ${2:var}${3: = null}${4};
##
## Declaration for ArrayList
snippet d.al
    List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
## Declaration for HashMap
snippet d.hm
    Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
## Declaration for HashSet
snippet d.hs
    Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
## Declaration for Stack
snippet d.st
    Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
##
## Singleton Pattern
snippet singlet
    private static class Holder {
        private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
    }

    private $1() { }

    public static $1 getInstance() {
        return Holder.INSTANCE;
    }
##
## Enhancements to Methods, variables, classes, etc.
snippet ab
    abstract ${0}
snippet fi
    final ${0}
snippet st
    static ${0}
snippet sy
    synchronized ${0}
##
## Error Methods
snippet err
    System.err.print("${0:Message}");
snippet errf
    System.err.printf("${1:Message}", ${0:exception});
snippet errln
    System.err.println("${0:Message}");
##
## Exception Handling
snippet as
    assert ${1:test} : "${2:Failure message}";
snippet ae
    assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
snippet aae
    assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
snippet af
    assertFalse("${1:Failure message}", ${2:condition});
snippet at
    assertTrue("${1:Failure message}", ${2:condition});
snippet an
    assertNull("${1:Failure message}", ${2:object});
snippet ann
    assertNotNull("${1:Failure message}", ${2:object});
snippet ass
    assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet asns
    assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet fa
    fail("${1:Failure message}");
snippet ca
    catch(${1:Exception} ${2:e}) ${0}
snippet thr
    throw ${0}
snippet ths
    throws ${0}
snippet try
    try {
        ${0}
    } catch(${1:Exception} ${2:e}) {
    }
snippet tryf
    try {
        ${0}
    } catch(${1:Exception} ${2:e}) {
    } finally {
    }
##
## Find Methods
snippet findall
    List<${1:listName}> ${2:items} = ${1}.findAll();
snippet findbyid
    ${1:var} ${2:item} = ${1}.findById(${3});
##
## Javadocs
snippet /**
    /**
     * ${0}
     */
snippet @au
    @author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
snippet @br
    @brief ${0:Description}
snippet @fi
    @file ${0:`vim_snippets#Filename("$1")`}.java
snippet @pa
    @param ${0:param}
snippet @re
    @return ${0:param}
##
## Logger Methods
snippet debug
    Logger.debug(${1:param});
snippet error
    Logger.error(${1:param});
snippet info
    Logger.info(${1:param});
snippet warn
    Logger.warn(${1:param});
##
## Loops
snippet enfor
    for (${1} : ${2}) ${0}
snippet for
    for (${1}; ${2}; ${3}) ${0}
snippet wh
    while (${1}) ${0}
##
## Main method
snippet main
    public static void main (String[] args) {
        ${0}
    }
##
## Print Methods
snippet print
    System.out.print("${0:Message}");
snippet printf
    System.out.printf("${1:Message}", ${0:args});
snippet println
    System.out.println(${0});
snippet printlna
    System.out.println(Arrays.toString(${0}));
##
## Render Methods
snippet ren
    render(${1:param});
snippet rena
    renderArgs.put("${1}", ${2});
snippet renb
    renderBinary(${1:param});
snippet renj
    renderJSON(${1:param});
snippet renx
    renderXml(${1:param});
##
## Setter and Getter Methods
snippet set
    ${1:public} void set${3:}(${2:String} ${0:}){
        this.$4 = $4;
    }
snippet get
    ${1:public} ${2:String} get${3:}(){
        return this.${0:};
    }
##
## Terminate Methods or Loops
snippet re
    return ${0}
snippet br
    break;
##
## Test Methods
snippet t
    public void test${1:Name}() throws Exception {
        ${0}
    }
snippet test
    @Test
    public void test${1:Name}() throws Exception {
        ${0}
    }
##
## Utils
snippet Sc
    Scanner
##
## Miscellaneous
snippet action
    public static void ${1:index}(${2:args}) { ${0} }
snippet rnf
    notFound(${1:param});
snippet rnfin
    notFoundIfNull(${1:param});
snippet rr
    redirect(${1:param});
snippet ru
    unauthorized(${1:param});
snippet unless
    (unless=${1:param});
