snippet #!
abbr    #!/bin/sh
alias   shebang
options head
	#!/bin/${1:sh}
	${0}


snippet if
	if [ ${1:#:condition} ]; then
		${0:TARGET}
	fi


snippet el
	else
		${0:TARGET}


snippet elif
	elif [ ${1:#:condition} ]; then
		${0:TARGET}


snippet for
	for ${1:i} in ${2:#:words}; do
		${0:TARGET}
	done

snippet while
alias wh
	while ${1:#:condition} ; do
		${0:TARGET}
	done


snippet until
	until ${1:#:condition} ; do
		${0:TARGET}
	done


snippet heredoc
alias   h <<
	<< ${1:EOF}
		${0:#:TARGET}
	$1

snippet env
	#!/usr/bin/env ${1}


snippet tmp
	${1:TMPFILE}=$(mktemp ${2:XXX})
	trap "rm -f '${$1}'" 0               # EXIT
	trap "rm -f '${$1}'; exit 1" 2       # INT
	trap "rm -f '${$1}'; exit 1" 1 15    # HUP TERM
	${0}

snippet function
alias func
	${1:#:name}()
	{
		${0:TARGET}
	}

snippet     match-regexp
abbr        =~
options     head
	if [[ $${1:string} =~ ${2:^regexp.*} ]]; then
		${0}
	fi

snippet     assign
abbr        var-assign
options     head
	${1:name}="${2:something}"

snippet     case
options     head
	case "$${1:{name\}}" in
		${2:pattern*})
			${0}
			;;
		*)
			${3:echo "$$1 Didn't match anything"}
	esac

snippet     warn
options     head
	echo "${0:TARGET}" 1>&2

snippet     abort
options     head
	echo "${0:TARGET}" 1>&2
	exit 1

# vim: set noexpandtab :
# Shebang. Executing bash via /usr/bin/env makes scripts more portable.
snippet #!
    #!/usr/bin/env sh
    
snippet bash
    #!/usr/bin/env bash

snippet if
    if [[ ${1:condition} ]]; then
        ${0:#statements}
    fi
snippet elif
    elif [[ ${1:condition} ]]; then
        ${0:#statements}
snippet for
    for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
        ${0:#statements}
    done
snippet fori
    for ${1:needle} in ${2:haystack} ; do
        ${0:#statements}
    done
snippet wh
    while [[ ${1:condition} ]]; do
        ${0:#statements}
    done
snippet until
    until [[ ${1:condition} ]]; do
        ${0:#statements}
    done
snippet case
    case ${1:word} in
        ${2:pattern})
            ${0};;
    esac
snippet go
    while getopts '${1:o}' ${2:opts}
    do
        case $$2 in
        ${3:o0})
            ${0:#staments};;
        esac
    done
# Set SCRIPT_DIR variable to directory script is located.
snippet sdir
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# getopt
snippet getopt
    __ScriptVersion="${1:version}"

    #===  FUNCTION  ================================================================
    #         NAME:  usage
    #  DESCRIPTION:  Display usage information.
    #===============================================================================
    function usage ()
    {
        echo "Usage :  $${0:0} [options] [--]

        Options:
        -h|help       Display this message
        -v|version    Display script version"

    }    # ----------  end of function usage  ----------

    #-----------------------------------------------------------------------
    #  Handle command line arguments
    #-----------------------------------------------------------------------

    while getopts ":hv" opt
    do
      case $opt in

        h|help     )  usage; exit 0   ;;

        v|version  )  echo "$${0:0} -- Version $__ScriptVersion"; exit 0   ;;

        * )  echo -e "\n  Option does not exist : $OPTARG\n"
              usage; exit 1   ;;

      esac    # --- end of case ---
    done
    shift $(($OPTIND-1))
snippet root
    if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi

snippet fun-sh
    ${1:function_name}() {
        ${0:#function_body}
    }

snippet fun
    function ${1:function_name}() {
        ${0:#function_body}
    }
